<snippet>
	<content><![CDATA[
/***********************************************************MATRIX EXPONENTIATION**********************************************************/
/*
derive the initial matrix and initialise it.
intialise ans matrix with initial matrix.
finally multiply it with dp array (base values) of T(n-1),T(n-2)..etc
|a b c| |T(n-1)|   |T(n)  |
|d e f| |T(n-2)| = |T(n-1)|
|g h i| |T(n-3)|   |T(n-2)|
a,b,c,d..=?
*/

#define SZ ${1:3}
lli ansmatrix[SZ][SZ];
lli initial[SZ][SZ]={{2,1,1},{1,0,0},{0,1,0}};

//utility to multiply matrices
void multiply(lli mul[][SZ]){
        lli temp[SZ][SZ];
        for(int i=0;i<SZ;i++){
                for(int j=0;j<SZ;j++){
                    temp[i][j]=0;
                    for(int k=0;k<SZ;k++){
                            temp[i][j]=(temp[i][j]%md+(mul[i][k]*ansmatrix[k][j])%md)%md;
                    }
                }
        }
        for(int i=0;i<SZ;i++){
            for(int j=0;j<SZ;j++){
                ansmatrix[i][j]=temp[i][j];
            }
        }
}

// POWER(M,n)
void matrixexponentiate(lli n){
        if(n<2){
            return;
        }
        matrixexponentiate(n/2);
        multiply(ansmatrix);
        if(n%2){
            multiply(initial); 
        }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrixexp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
